import java.util.ArrayList;
import tester.*;
import javalib.impworld.*;
import java.awt.Color;
import javalib.worldimages.*;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Random;

//to represent a Cell
class Cell {
    int x;
    int y;
    ArrayList<Edge> neighbors;
    static final int SIZE = 10;
    Cell(int x, int y) {
        this.x = x;
        this.y = y;
        this.neighbors = new ArrayList<Edge>();
    }
    // to check if cells are equal
    public boolean equals(Object that) {
        if (!(that instanceof Cell)) {
            return false;
        }
        else {
            Cell c = (Cell) that;
            return (this.x == c.x && this.y == c.y);
        }
    }
    public int hashCode() {
        return this.x + this.y;
    }
    // is the cell in a hashmap?
    Cell find(HashMap<Cell, Cell> h) {
        if (this.equals(h.get(this))) {
            return this;
        }
        else {
            return h.get(this).find(h);
        }
    }
    // makes the neighbors
    public void makeNeighbors(ArrayList<Edge> edges) {
        for (Edge e : edges) {
            if (e.c1.equals(this)) {
                this.neighbors.add(e);
            }
            if (e.c2.equals(this)) {
                Edge temp = new Edge(e.weight, e.c2, e.c1);
                this.neighbors.add(temp);
            }
        }
    }
}
//to represent the Player
class Player {
    Cell cell;
    Player(Cell cell) {
        this.cell = cell;
    }
}
//to represent the Stack
class Stack<T> {
    ArrayList<T> list;
    Stack(ArrayList<T> list) {
        this.list = list;
    }
    // to add to the stack
    public void add(T t) {
        list.add(0, t);
    }
    // to remove from the stack
    public T pop() { 
        T result = list.get(0);
        list.remove(0);
        return result;
    }
}
//to represent the Queue
class Queue<T> {
    ArrayList<T> list;
    Queue(ArrayList<T> list) {
        this.list = list;
    }
    // to add to the queue
    public void add(T t) {
        list.add(list.size(), t);
    }
    // to remove from the queue
    public T pop() { 
        T result = list.get(0);
        list.remove(0);
        return result;
    }
}


// to represent the Edge
class Edge implements Comparator<Edge>, Comparable<Edge> {
    Integer weight; // cannot call int because need to compare two edges
    Cell c1;
    Cell c2;
    Edge(Cell c1, Cell c2)
    {
        this.c1 = c1;
        this.c2 = c2;
        Random r = new Random();
        weight = r.nextInt(100);
    }
    Edge(Integer weight, Cell c1, Cell c2) {
        this.weight = weight;
        this.c1 = c1;
        this.c2 = c2;
    }
    // to compare the edges
    public int compare(Edge e1, Edge e2) {
        return e1.weight - e2.weight;
    }
    // to compare the edge to another
    public int compareTo(Edge e) {
        return this.weight.compareTo(e.weight);
    }
    // to check if two edges are equal
    public boolean equals(Object that) {
        if (!(that instanceof Edge)) {
            return false;
        }
        else {
            Edge e = (Edge) that;
            return ((this.c1.equals(e.c1) && this.c2.equals(e.c2)) ||
                    this.c1.equals(e.c2) && this.c2.equals(e.c1));
        }

    }
    // to draw the edge
    WorldImage drawEdge() {
        if (this.c1.x == this.c2.x) {
            return new RectangleImage(10, 1, OutlineMode.SOLID, Color.BLACK);
            //            return new LineImage(new Posn((this.c1.x * Cell.SIZE),
            //                    this.c1.y * Cell.SIZE + Cell.SIZE),
            //                    new Posn(this.c1.x * Cell.SIZE + Cell.SIZE,
            //                            this.c1.y * Cell.SIZE + Cell.SIZE), Color.BLACK);
        }
        else
        {
            return new RectangleImage(1, 10, OutlineMode.SOLID, Color.BLACK);
            //            return new LineImage(new Posn(this.c1.x * Cell.SIZE + Cell.SIZE, 
            //                    this.c1.y * Cell.SIZE),
            //                    new Posn(this.c1.x * Cell.SIZE + Cell.SIZE, 
            //                            this.c1.y * Cell.SIZE + Cell.SIZE), Color.BLACK);
        }
    }
}




// to represent the World
class MazeWorld extends World {
    int WIDTH;//static final int WIDTH = 64;
    int HEIGHT;//static final int HEIGHT = 60;
    boolean depth;
    boolean breadth;
    Player player = new Player(new Cell(0, 0));
    ArrayList<ArrayList<Cell>> board = new ArrayList<ArrayList<Cell>>();
    ArrayList<Cell> visited = new ArrayList<Cell>();
    ArrayList<Edge> edges = new ArrayList<Edge>();
    ArrayList<Edge> walls = new ArrayList<Edge>();
    HashMap<Cell, Cell> representatives = new HashMap<Cell, Cell>();
    Stack<Edge> depthlist = new Stack<Edge>(new ArrayList<Edge>());
    Queue<Edge> breadthlist = new Queue<Edge>(new ArrayList<Edge>());
    MazeWorld(int WIDTH, int HEIGHT) {
        this.reset(this.WIDTH * Cell.SIZE, this.HEIGHT * Cell.SIZE);
    }
    void reset(int width, int height) {
        player = new Player(new Cell(0, 0));
        board = new ArrayList<ArrayList<Cell>>();
        visited = new ArrayList<Cell>();
        edges = new ArrayList<Edge>();
        walls = new ArrayList<Edge>();
        representatives = new HashMap<Cell, Cell>();
        breadth = false;
        depth = false;
        depthlist = new Stack<Edge>(new ArrayList<Edge>());
        breadthlist = new Queue<Edge>(new ArrayList<Edge>());
        for (int i = 0; i <= this.WIDTH; i += 1) {
            ArrayList<Cell> row = new ArrayList<Cell>();
            for (int j = 0; j <= this.HEIGHT; j += 1) {
                row.add(new Cell(i, j));
            }
            board.add(row);
        }
        for (int i = 0; i <= this.WIDTH; i += 1) {
            for (int j = 0; j <= this.HEIGHT; j += 1) {
                if (board.get(i).get(j).x != this.WIDTH)
                {
                    edges.add(new Edge(board.get(i).get(j), board.get(i + 1).get(j)));
                }
                if (board.get(i).get(j).y != this.HEIGHT)
                {
                    edges.add(new Edge(board.get(i).get(j), board.get(i).get((j + 1))));
                }
            }
        }
        Collections.sort(edges);
        for (int i = 0; i <= this.WIDTH; i += 1) {
            for (int j = 0; j <= this.HEIGHT; j += 1) {
                representatives.put(board.get(i).get(j), board.get(i).get(j));
            }
        }
        this.kruskals();
        for (ArrayList<Cell> row : board) {
            for (Cell c : row) {
                c.makeNeighbors(this.edges);
            }
        }
        player.cell = board.get(0).get(0);
    }
    void kruskals() {

        ArrayList<Edge> workList = new ArrayList<Edge>();
        workList.addAll(edges);
        edges.clear();
        while (workList.size() > 1)
        {
            Edge e1 = workList.get(0);
            if (e1.c1.find(representatives).equals(e1.c2.find(representatives))) {
                workList.remove(0);
                this.walls.add(e1);
            }
            else {
                this.edges.add(e1);
                union(representatives, e1.c1.find(representatives), e1.c2.find(representatives));
                workList.remove(0);
            }
        }
    }
    void union(HashMap<Cell, Cell> h, Cell c1, Cell c2) {
        h.put(c1, c2);
    }
    //    public WorldImage makeImage() {
    //        WorldImage acc = new RectangleImage(new Posn(0, 0), 
    //                0, 0, new Black());
    //        for (Edge e: walls)
    //        {
    //            acc = new OverlayImage(acc, e.drawEdge());
    //        }
    //        for (Cell c : visited) {
    //            acc = new OverlayImage(acc, new RectangleImage(
    //                    new Posn(c.x * Cell.SIZE + Cell.SIZE / 2,
    //                            c.y * Cell.SIZE + Cell.SIZE / 2), 
    //                            Cell.SIZE - 1, Cell.SIZE - 1, new Color(157, 225, 250)));
    //        }
    //        acc = new OverlayImages(acc, new RectangleImage(
    //                new Posn(this.player.cell.x * Cell.SIZE + Cell.SIZE / 2,
    //                        this.player.cell.y * Cell.SIZE + Cell.SIZE / 2), 
    //                        Cell.SIZE - 1, Cell.SIZE - 1, new Blue()));
    //        return acc;
    //    }
    void updateDepth() {
        if (depthlist.list.size() > 0) {
            Edge next = depthlist.pop();
            this.visited.add(next.c1);
            this.player.cell = next.c2;
            if (next.c2.equals(new Cell(this.WIDTH, this.HEIGHT))) {
                this.depth = false;
            }
            else if (!this.visited.contains(next.c2) && 
                    !next.c2.equals(this.board.get(0).get(0))) {
                for (Edge e : player.cell.neighbors) {
                    depthlist.add(e);
                }
            }
        }
    }
    void updateBreadth() {
        if (breadthlist.list.size() > 0) {
            Edge next = breadthlist.pop();
            this.visited.add(next.c1);
            this.player.cell = next.c2;
            if (next.c2.equals(new Cell(this.WIDTH, this.HEIGHT))) {
                this.breadth = false;
            }
            else if (!this.visited.contains(next.c2) && 
                    !next.c2.equals(this.board.get(0).get(0))) {
                for (Edge e : player.cell.neighbors) {
                    breadthlist.add(e);
                }
            }
        }
    }
    public void updatePlayer(String ke) {
        if (ke.equals("d")) {
            if (this.player.cell.equals(board.get(0).get(0))) {
                depthlist = new Stack<Edge>(player.cell.neighbors);
            }
            this.depth = !this.depth;
        }
        if (ke.equals("b")) {
            if (this.player.cell.equals(board.get(0).get(0))) {
                breadthlist = new Queue<Edge>(player.cell.neighbors);
            }
            this.breadth = !this.breadth;
        }
        if (ke.equals("r")) {
            this.reset(this.WIDTH * Cell.SIZE, this.HEIGHT * Cell.SIZE);
        }
        if (ke.equals("up") && this.contains(new Edge(player.cell, 
                new Cell(player.cell.x, player.cell.y - 1)))) {
            player.cell = new Cell(player.cell.x, player.cell.y - 1);
            visited.add(player.cell);
        }
        if (ke.equals("down") && this.contains(new Edge(player.cell, 
                new Cell(player.cell.x, player.cell.y + 1)))) {
            player.cell = new Cell(player.cell.x, player.cell.y + 1);
            visited.add(player.cell);
        }
        if (ke.equals("left") && this.contains(new Edge(this.player.cell, 
                new Cell(this.player.cell.x - 1, this.player.cell.y)))) {
            this.player.cell = new Cell(this.player.cell.x - 1, this.player.cell.y);
            this.visited.add(this.player.cell);
        }
        if (ke.equals("right") && this.contains(new Edge(this.player.cell, 
                new Cell(this.player.cell.x + 1, this.player.cell.y)))) {
            this.player.cell = new Cell(this.player.cell.x + 1, this.player.cell.y);
            this.visited.add(this.player.cell);
        }
    }

    public void onKeyEvent(String ke) {
        updatePlayer(ke);
    }

    public boolean contains(Edge that) {
        boolean result = false;
        for (Edge e : edges) {
            if (e.equals(that)) {
                result = true;
            }
        }
        return result;
    }
    public void onTick() {
        if (this.depth) {
            this.updateDepth();
        }
        if (this.breadth) {
            this.updateBreadth();
        }
    }

    public WorldScene makeScene() {
        WorldScene w = new WorldScene(Cell.SIZE * this.WIDTH + 10, 
                Cell.SIZE * this.HEIGHT + 10);
        for (Edge e : walls) {
            w.placeImageXY(e.drawEdge(), (e.c1.x + e.c2.x) / 2 * Cell.SIZE, 
                    (e.c1.y + e.c2.y) / 2 * Cell.SIZE + 0.5 * Cell.SIZE);
        }
        return w;

    }
}
// Examples Class
class ExamplesWorld {
    Cell c1 = new Cell(1, 1);
    Cell c2 = new Cell(1, 1);
    Cell c3 = new Cell(1, 2);
    Edge e1 = new Edge(1, c1, c3);
    Edge e2 = new Edge(2, c3, c1);
    Edge e4 = new Edge(3, c2, c1);
    MazeWorld m1 = new MazeWorld(50, 50);
    boolean testSameCell(Tester t) {
        return t.checkExpect(c1.equals(c2), true) &&
                t.checkExpect(c1.equals(c3), false);
    }
    boolean testSameEdge(Tester t) {
        return t.checkExpect(e1.equals(e1), true) &&
                t.checkExpect(e4.equals(e1), false);
    }
    boolean testCompare(Tester t) {
        return t.checkExpect(e1.compare(e2, e1), 1);
    }
    boolean testCompareto(Tester t) {
        return t.checkExpect(e1.compareTo(e2), -1);
    }
    boolean testdrawEdge(Tester t) {
        return t.checkExpect(e1.drawEdge(), 
                new RectangleImage(10, 1, OutlineMode.SOLID, Color.BLACK));
    }
    boolean testHashCode(Tester t) {
        return t.checkExpect(c1.hashCode(), 2);
    }
    void testGmae(Tester t) {

        this.m1.bigBang(Cell.SIZE * m1.WIDTH + 10, Cell.SIZE * m1.HEIGHT + 10, 0.01);
    }

}
